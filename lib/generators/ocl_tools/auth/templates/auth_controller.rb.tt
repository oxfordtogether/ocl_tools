class AuthController < ApplicationController
  skip_before_action :logged_in_using_omniauth?
  layout "unauthorized"

  # displays the login page
  def login; end

  def invalid_permissions; end

  def email_not_verified; end

  def logout
    reset_session

    redirect_to logout_url.to_s
  end

  def callback
    verify_and_log_user_in

    redirect_to "/"
  end

  # if the auth0_callback fails
  def failure
    # show a failure page or redirect to an error page
    @error_msg = request.params["message"]
  end

  private

  def verify_and_log_user_in
    auth_details = request.env["omniauth.auth"]
    return unless auth_details

    email_verified = session[:email_verified] = auth_details.dig(:extra, :raw_info, :email_verified)
    email = session[:email] = auth_details.dig(:info, :email)
    auth0_id = session[:auth0_id] = auth_details[:uid]

    return if auth0_id.nil?

    <%- user_classes_and_vars.each do |user_class, user_var| -%>
    attempt_<%= user_var %>_login(auth0_id, email, email_verified)
    <%- end -%>
  end

  <%- user_classes_and_vars.each do |user_class, user_var| -%>
  def attempt_<%= user_var %>_login(auth0_id, email, email_verified)
    # first we want to see if we can find a <%= user_var %>
    <%= user_var %> = <%= user_class %>.where(auth0_id: auth0_id).first

    # if there isn't a <%= user_var %>, try to find one to link to
    if !<%= user_var %> && email && email_verified
      <%= user_var %> = <%= user_class %>.where(email: email).first
      <%= user_var %>&.update!(auth0_id: auth0_id)
    end

    session[:<%= user_var %>_id] = <%= user_var %>.id if <%= user_var %>&.login_enabled?
  end

  <%- end -%>
  def logout_url
    domain = Rails.application.config_for(:auth0).domain
    client_id = Rails.application.config_for(:auth0).client_id

    request_params = {
      returnTo: root_url,
      client_id: client_id,
    }

    URI::HTTPS.build(host: domain, path: "/v2/logout", query: to_query(request_params))
  end

  def to_query(hash)
    hash.map { |k, v| "#{k}=#{CGI.escape(v)}" unless v.nil? }.reject(&:nil?).join("&")
  end
end
