module Secured
  extend ActiveSupport::Concern

  included do
    before_action :logged_in_using_omniauth?

    helper_method :current_user_email
    <%- user_classes_and_vars.each do |user_class, user_var| -%>
    helper_method :current_<%= user_var %>_id
    <%- end -%>
  end

  def logged_in_using_omniauth?
    fake_login if Rails.env.demo?
    fake_login if Rails.env.development? && ENV["REQUIRE_AUTH_IN_DEV"] != "true"

    <%- user_classes_and_vars.each do |user_class, user_var| -%>
    Current.<%= user_var %>_id = current_<%= user_var %>_id
    <%- end -%>

    <%- user_classes_and_vars.each do |user_class, user_var| -%>
    return true if current_<%= user_var %>_id
    <%- end -%>

    if session[:auth0_id].nil?
      redirect_to("/login", turbolinks: false)
    elsif !session[:email_verified]
      redirect_to("/email_not_verified", turbolinks: false)
    else
      # we've got a auth0_id and a verified email, so we're just not connected to a user
      redirect_to("/invalid_permissions", turbolinks: false)
    end
  end

  def current_auth0_id
    session[:auth0_id]
  end

  <%- user_classes_and_vars.each do |user_class, user_var| -%>
  def current_<%= user_var %>_id
    session[:<%= user_var %>_id]
  end

  <%- end -%>
  def current_user_email
    session[:email]
  end

  private

  def fake_login
    raise "Can't fake login in #{Rails.env}" unless Rails.env.demo? || Rails.env.development?

    session[:auth0_id] ||= "fake-auth0-id-#{('a'..'z').to_a.sample(5).join}"

    <%- user_classes_and_vars.first.tap do |user_class, user_var| -%>
    <%= user_var %> = <%= user_class %>.first
    raise "You need to create a <%= user_class %> for fake login to succeed" unless <%= user_var %>

    session[:<%= user_var %>_id] ||= <%= user_class %>.first.id
    <%- end -%>
  end
end
