<% module_namespacing do -%>
class <%= controller_class_name %>Controller < <%= base_controller_class_name %>Controller
  before_action :set_<%= singular_name %>, only: %i[show next prev update]

  # GET <%= route_url %>/:filter/:id
  def index
    @pagy, @<%= plural_name %> = pagy(collection, items: 20)
  end

  # GET <%= route_url %>/:filter/:id
  def show; end

  # <%= route_url %>/:filter/:id/next
  def next
    # we're working back in time, so next is earlier
    next_<%= singular_name %> = collection.earlier_than(@<%= singular_name %>).first
    if next_<%= singular_name %>
      redirect_to <%= singular_route_name %>_url(params[:filter], next_<%= singular_name %>.id)
    else
      redirect_to <%= index_helper %>_url(params[:filter])
    end
  end

  # <%= route_url %>/:filter/:id/prev
  def prev
    # we're working back in time, so prev is later
    prev_<%= singular_name %> = collection.later_than(@<%= singular_name %>).last
    if prev_<%= singular_name %>
      redirect_to <%= singular_route_name %>_url(params[:filter], prev_<%= singular_name %>.id)
    else
      redirect_to <%= index_helper %>_url(params[:filter])
    end
  end

  # PATCH/PUT <%= route_url %>/:filter/:id
  def update; end

  private

  def collection
    case params[:filter]
    when "all"
      <%= model_name %>.newest_first
    when "inbox"
      <%= model_name %>.unread.newest_first
    else
      raise "Unrecognised filter #{params[:filter]}"
    end
  end

  def set_<%= singular_name %>
    @<%= singular_name %> = collection.find(params[:id]) 
    @current_index = collection.later_than(@<%= singular_name %>).count
    @total = collection.count
  end
end
<% end %>
  